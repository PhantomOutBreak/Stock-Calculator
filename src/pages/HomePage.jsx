// src/pages/HomePage.jsx

import React, { useState } from 'react';
import '../css/HomePage.css';
import '../css/App.css';
import StockChart from '../Component/StockChart';
import StockTable from '../Component/StockTable';

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô fetch ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏∏‡πâ‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
async function fetchStockHistory(symbol, days) {
  // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≠‡∏Å (‡∏õ‡∏•‡πà‡∏≠‡∏¢ backend ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à .BK)
  const ticker = symbol.trim().toUpperCase();

  const today = new Date();
  const startDate = new Date();
  startDate.setDate(today.getDate() - days);
  const startDateString = startDate.toISOString().split('T')[0];

  const url = `http://localhost:5000/api/stock/history/${ticker}?startDate=${startDateString}`;

  const res = await fetch(url);
  if (!res.ok) {
    let err;
    try {
      err = await res.json();
    } catch {
      throw new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }
    throw new Error(err.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
  }
  return await res.json();
}

function HomePage() {
  // --- State Management (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ---
  const [inputSymbol, setInputSymbol] = useState('');
  const [days, setDays] = useState(90);
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [currentSymbol, setCurrentSymbol] = useState('');
  const [displayDays, setDisplayDays] = useState(90);

  // --- Handlers ---
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    // ‚≠ê 1. ‡πÑ‡∏°‡πà‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: ‡πÄ‡∏≠‡∏≤‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î setHistory([]) ‡πÅ‡∏•‡∏∞ setCurrentSymbol('') ‡∏≠‡∏≠‡∏Å
    try {
      const data = await fetchStockHistory(inputSymbol, days);
      // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ set ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      setHistory(data.map(row => ({
        ...row,
        date: row.date ? new Date(row.date).toLocaleDateString('th-TH', { day: '2-digit', month: 'short', year:'numeric' }) : '-'
      })));
      setCurrentSymbol(inputSymbol.trim().toUpperCase());
      setDisplayDays(days);
    } catch (err) {
      setError(err.message);
      setHistory([]); // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î error ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏¥‡πâ‡∏á
    }
    setLoading(false);
  };

  return (
    <div className="page-container">
      <h1>üìä Stock Price Checker</h1>
  <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô (‡πÑ‡∏ó‡∏¢/‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î</p>
      
      {/* --- Form (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) --- */}
      <form onSubmit={handleSubmit} className="stock-form">
          <div className="form-group">
              <label className="stockname-label" htmlFor="sname">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏∏‡πâ‡∏ô:</label>
              <input type="text" id="sname" className="stockname-input" placeholder="‡πÄ‡∏ä‡πà‡∏ô PTT, AOT" autoComplete="off" value={inputSymbol} onChange={e => setInputSymbol(e.target.value)} />
          </div>
          <div className="form-group">
              <label className="stockname-label" htmlFor="days">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á:</label>
              <input type="number" id="days" className="stockname-input" value={days} onChange={e => setDays(Math.max(1, parseInt(e.target.value) || 1))} min="1" max="730" />
          </div>
          <div className="form-group">
          <label className="stockname-label" htmlFor="days">‡∏Å‡∏î‡∏ú‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô:</label>
          <button type="submit" className="primary-button" disabled={loading || !inputSymbol}>
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...' : '‡∏î‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á'}
          </button>
          </div>
      </form>

      {/* ‚≠ê 2. ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• Error ‡πÅ‡∏•‡∏∞ Loading */}
      {/* ‡πÅ‡∏™‡∏î‡∏á Error ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏™‡∏°‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ */}
      {error && <div className="error-message">{error}</div>}

      {/* --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå --- */}
      {/* ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô history ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á container ‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏°‡∏≠
        ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° class 'is-refetching' ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á loading
      */}
      {history.length > 0 && !error && (
        <div className={`results-container ${loading ? 'is-refetching' : ''}`}>
          {/* ‡πÅ‡∏™‡∏î‡∏á Spinner ‡∏ó‡∏±‡∏ö‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á refetch */}
          {loading && <div className="loading-spinner-overlay"></div>}
          
          <h2>
            ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á {displayDays} ‡∏ß‡∏±‡∏ô ({currentSymbol})
          </h2>
          <div className="chart-container">
            <StockChart data={history} />
          </div>
          <StockTable data={history} />
        </div>
      )}

      {/* ‡πÅ‡∏™‡∏î‡∏á Spinner ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏≠‡∏ô‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å (‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô history) */}
      {loading && history.length === 0 && <div className="loading-spinner"></div>}
    </div>
  );
}

export default HomePage;
